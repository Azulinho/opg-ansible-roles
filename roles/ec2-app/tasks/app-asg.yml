- assert:
    that:
      - asg_data is defined
      - asg_name is defined

#  create asg for app component
- block:
    - block:
        - name: get search string
          set_fact:
            search_str: '^{{ asg_data.asg_sg.client_sg }}.*'

        - name: Lookup client group id
          set_fact:
            asg_client_sg_id: "{{ client_security_groups.results| selectattr('item.name', 'match', search_str) | map(attribute='group_id') | list| first }}"

        - name: Create security group for asg
          ec2_group:
            name: "{{ asg_data.asg_sg.name }}"
            description: "{{ asg_data.asg_sg.desc }}"
            rules: "{{ asg_data.asg_sg.ruleset | rules_from_dict([asg_client_sg_id]) }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: asg_security_group_1
      when: asg_data.asg_sg.client_sg is defined

    - block:
        - name: Create security group for asg
          ec2_group:
            name: "{{ asg_data.asg_sg.name }}"
            description: "{{ asg_data.asg_sg.desc }}"
            rules: "{{ asg_data.asg_sg.ruleset | rules_from_dict() }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: asg_security_group_2

      when: asg_data.asg_sg.client_sg is undefined

    - name: Add tags until 2.2
      ec2_tag:
        resource: "{{ asg_security_group_2.group_id | default(asg_security_group_1.group_id) }}"
        state: present
        tags: "{{ vpc.env_tags | combine({'Name': asg_data.asg_sg.name}) }}"

  when: asg_data.asg_sg is defined

- block:
    - name: Set unique value for launch config
      shell: git log | head -n 1 | awk '{print $2}'
      register: lc_pf
      changed_when: False

    - name: Create launch configuration for app
      ec2_lc:
        state: present
        name: "{{ asg_name }}-{{ opg_data.stack }}-{{ lc_pf.stdout }}"
        image_id: "{{ vpc.ami }}"
        key_name: "{{ vpc.ssh_key_name| default('default') }}"
        security_groups: "{{ asg_data.sg }}"
        instance_type: "{{ asg_data.instance_type }}"
        instance_monitoring: yes
        instance_profile_name: "{{ instance_data.iam_role |default(asg_name + '.' + opg_data.stack) }}"
        user_data: "{{ lookup('template', 'bootstrap.j2.sh') }}"

    - name: Create autoscaling group with ELB
      ec2_asg:
        state: present
        name: "{{ asg_name }}-{{ opg_data.stack }}"
        launch_config_name: "{{ asg_name }}-{{ opg_data.stack }}-{{ lc_pf.stdout }}"
        health_check_period: 900
        health_check_type: 'EC2'
#        replace_all_instances: yes
        wait_for_instances: False
        min_size: "{{ asg_data.min | default(2) }}"
        max_size: "{{ asg_data.max | default(2) }}"
        desired_capacity: "{{ asg_data.desired | default(2) }}"
        load_balancers: "{{ app_elb.elb.tags.Name | default(omit) }}"
        termination_policies: [ 'OldestInstance', 'OldestLaunchConfiguration' ]
        tags: "{{ vpc.env_tags | combine({ 'Name': asg_name + '-' + opg_data.stack, 'Role': asg_name})|dict_to_list }}"
        vpc_zone_identifier: "{{ asg_data.subnets }}"
      when: has_elb

    - name: Create autoscaling group without ELB
      ec2_asg:
        state: present
        name: "{{ asg_name }}-{{ opg_data.stack }}"
        launch_config_name: "{{ asg_name }}-{{ opg_data.stack }}-{{ lc_pf.stdout }}"
        health_check_period: 900
        health_check_type: 'EC2'
#        replace_all_instances: yes
        min_size: "{{ asg_data.min | default(2) }}"
        max_size: "{{ asg_data.max | default(2) }}"
        desired_capacity: "{{ asg_data.desired | default(2) }}"
        termination_policies: [ 'OldestInstance', 'OldestLaunchConfiguration' ]
        tags: "{{ vpc.env_tags | combine({ 'Name': asg_name + '-' + opg_data.stack, 'Role': asg_name})|dict_to_list }}"
        vpc_zone_identifier: "{{ asg_data.subnets }}"
      when: not has_elb
