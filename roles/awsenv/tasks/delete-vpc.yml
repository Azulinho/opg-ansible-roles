---
#removal of vpc requires removiing everything else first
# everything else:
# instances, elb, asg, launch conf
# route53 zone
# nat gw,

- name: get VPC data
  ec2_vpc_net_facts:
    filters:
      'tag:Name': "{{ vpc.env_tags.Name }}"
  register: vpc_data

- set_fact:
    vpc_id: "{{ vpc_data.vpcs.0.id }}"

- name: Get list of subnets
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: subnet_data
  always_run: true
  tags:
    - always

- name: Setup vars for playbook
  set_fact:
    private_subnets: "{{ subnet_data.subnets | selectattr('tags.Name', 'match', '^private.*')| map(attribute='id') | list }}"
    public_subnets: "{{ subnet_data.subnets | selectattr('tags.Name', 'match', '^public.*')| map(attribute='id') | list }}"

- name: Get all instance in VPC
  ec2_remote_facts:
    filters:
      vpc_id: "{{ vpc_id }}"
  register: instance_data

- name: Check if NAT gateway exists
  ec2_vpc_nat_gateway_facts:
    subnet_id: "{{ public_subnets[0] }}"
  register: has_nat_gw

- name: Show what we are deleting
  debug:
    msg: "{{ vpc_data | combine(instance_data) | combine(has_nat_gw) }}"

- pause:
    minutes: 1

- name: get list of autoscaling groups
  set_fact:
    asg_list: "{{ instance_data.instances |rejectattr('tags.aws:autoscaling:groupName', 'undefined')| list | map(attribute='tags.aws:autoscaling:groupName') | list | unique }}"

- name: Remove autoscaling groups
  ec2_asg:
    name: "{{ item }}"
    state: absent
    wait: yes
  with_items: "{{ asg_list | default([]) }}"

- name: Remove all instances
  ec2:
    state: absent
    instance_id: "{{ item.id }}"
    wait: yes
  with_items: "{{ instance_data.instances| default([]) }}"

- name: Remove nat gw
  ec2_vpc_nat_gateway:
    nat_gateway_id: "{{ has_nat_gw.NatGateways[0].NatGatewayId }}"
    state: absent
    wait: yes
  when: "{{ has_nat_gw.NatGateways| count > 0 }}"

- name: Remove VPC
  ec2_vpc:
    state: absent
    cidr_block: "{{ vpc.cidr }}"
    resource_tags: "{{ vpc.env_tags }}"
    wait: yes